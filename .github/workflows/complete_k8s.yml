name: Complete K8s

on:
  workflow_dispatch:
jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        count: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 ]
        payload: [50]
        users: [1]
    timeout-minutes: 600
    env:
      TEST_NAME: "netty_hello"
      TEST_ROOT: "tests"
    steps:
    - name: CHECKOUT
      uses: actions/checkout@v2
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Create Cluster
      env:
        AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
        AZURE_APP_PASSWORD: ${{ secrets.AZURE_APP_PASSWORD }}
        RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
      run: |
        az aks create \
            --resource-group "${RESOURCE_GROUP}" \
            --name perf-k8s-${{ matrix.count }} \
            --service-principal "${AZURE_APP_ID}"\
            --client-secret "${AZURE_APP_PASSWORD}" \
            --node-vm-size "Standard_F16s_v2" \
            --node-osdisk-size 256 \
            --node-osdisk-type Managed \
            --node-count 1 \
            --location "eastus" \
            --generate-ssh-keys
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: 'perf-k8s-${{ matrix.count }}'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy Niginx
      run: |
        # Create a namespace for your ingress resources
        kubectl create namespace ingress-basic

        # Add the ingress-nginx repository
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

        # Use Helm to deploy an NGINX ingress controller
        helm install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-basic \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux
        # Wait for ingress ip
        kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
        -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
        | head -n1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: 'perf-k8s-${{ matrix.count }}'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy artifacts
      run: |
        kubectl apply -f ${TEST_ROOT}/${TEST_NAME}/k8s.yaml
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Write values to outputs
      id: write
      run: |
        echo "::set-output name=cluster-ip::$(kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
                                              -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
                                              | head -n1)"
        echo "::set-output name=scenario-name::${TEST_NAME}"
    - name: Wait for VM instance
      run: sleep 60s
      shell: bash
    - name: Print outputs
      run: |
        sed -i -e 's/<<IP>>/${{ steps.write.outputs.cluster-ip }}/g' k8s-only/k8s.yaml
        sed -i -e 's/<<SCENARIO_NAME>>/${{ steps.write.outputs.scenario-name }}/g' k8s-only/k8s.yaml
        sed -i -e 's/<<PAYLOAD_SIZE>>/${{ matrix.payload }}/g' k8s-only/k8s.yaml
        sed -i -e 's/<<USERS>>/${{ matrix.users }}/g' k8s-only/k8s.yaml
        cat k8s-only/k8s.yaml
        kubectl apply -f k8s-only/k8s.yaml
        while [[ $(kubectl get pods -l app=jmeter -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1; done
        kubectl logs -f -l app="jmeter"
    - name: Cleaning up the cluster
      if: always()
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az group delete --name mc_${{ secrets.CLUSTER_RESOURCE_GROUP }}_perf-k8s-${{ matrix.count }}_eastus -y
          az aks delete --name perf-k8s-${{ matrix.count }} --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP }} -y